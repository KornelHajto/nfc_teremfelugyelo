// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251014112016_RemovedUnusedKeyProperty")]
    partial class RemovedUnusedKeyProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AttendanceType")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserNeptunId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserNeptunId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("API.Models.Classroom", b =>
                {
                    b.Property<string>("RoomId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoomId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("API.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassroomRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.PrimitiveCollection<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomRoomId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("API.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassroomRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Date")
                        .HasColumnType("time(6)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EnterSpan")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("ExitSpan")
                        .HasColumnType("time(6)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomRoomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("API.Models.Key", b =>
                {
                    b.Property<string>("Hash")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("LastUsedId")
                        .HasColumnType("int");

                    b.Property<string>("UserNeptunId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Hash");

                    b.HasIndex("LastUsedId");

                    b.HasIndex("UserNeptunId");

                    b.ToTable("PhysicalPass");
                });

            modelBuilder.Entity("API.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassroomRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EnterType")
                        .HasColumnType("int");

                    b.Property<string>("UserNeptunId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomRoomId");

                    b.HasIndex("UserNeptunId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("API.Models.RememberMe", b =>
                {
                    b.Property<string>("RememberHash")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserNeptunId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("RememberHash");

                    b.HasIndex("UserNeptunId");

                    b.ToTable("RememberMe");
                });

            modelBuilder.Entity("API.Models.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<string>("NeptunId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AdminLevel")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("NeptunId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.Attendance", b =>
                {
                    b.HasOne("API.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserNeptunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Course", b =>
                {
                    b.HasOne("API.Models.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("API.Models.Exam", b =>
                {
                    b.HasOne("API.Models.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Course");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("API.Models.Key", b =>
                {
                    b.HasOne("API.Models.Log", "LastUsed")
                        .WithMany()
                        .HasForeignKey("LastUsedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", null)
                        .WithMany("Keys")
                        .HasForeignKey("UserNeptunId");

                    b.Navigation("LastUsed");
                });

            modelBuilder.Entity("API.Models.Log", b =>
                {
                    b.HasOne("API.Models.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserNeptunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.RememberMe", b =>
                {
                    b.HasOne("API.Models.User", null)
                        .WithMany("RememberMe")
                        .HasForeignKey("UserNeptunId");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.Subject", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("API.Models.Subject", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("Keys");

                    b.Navigation("RememberMe");
                });
#pragma warning restore 612, 618
        }
    }
}
